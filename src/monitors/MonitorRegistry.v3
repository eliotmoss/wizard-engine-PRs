// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A global registry of all monitors available, e.g. to be selectable by command-line options.
component MonitorRegistry {
	private var list: List<MonitorRegistryEntry>;
	private var reports: List<void -> void>;

	// Register a new monitor with the given name.
	def add(name: string, help: string, m: Monitor) -> MonitorRegistryEntry {
		var entry = MonitorRegistryEntry.new(name, help, m);
		list = List.new(entry, list);
		return entry;
	}
	// Look up a monitor by its exact name, returning {null} if not found.
	def lookupName(name: string) -> MonitorRegistryEntry {
		for (l = list; l != null; l = l.tail) {
			if (Strings.equal(name, l.head.name)) return l.head;
		}
		return null;
	}
	def printHelp() {
		var out = Trace.OUT, H = out.putsln;
		var array = Lists.toArray(list);
		array = Arrays.sort(array, 0, array.length, LT);
		def indent = "    ";
		for (e in array) {
			out.puts(indent);
			out.mark().puts(e.name).ljustify_mark(13);
			out.puts(" ").puts(e.help);
			out.ln();
			if (e.options.list != null) {
				e.options.print(out, true);
			}
		}
	}
	def addReport(func: void -> void) {
		reports = List.new(func, reports);
	}
	def runReports() {
		for (l = Lists.reverse(reports); l != null; l = l.tail) {
			l.head();
		}
	}
}
def LT(a: MonitorRegistryEntry, b: MonitorRegistryEntry) -> bool {
	return Strings.asciiLt(a.name, b.name);
}

class MonitorRegistryEntry(name: string, help: string, monitor: Monitor) {
	def options = OptionGroup.new(name, BasicOptions.new());
//	def options = OptionGroup.new(name, BasicOptions.new(null));
}
